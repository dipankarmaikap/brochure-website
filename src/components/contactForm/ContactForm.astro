---
import Box from "~/components/ui/Box.astro";
import Text from "~/components/ui/Text.astro";
import InputFields from "~/components/contactForm/InputFields.astro";
---

<form
  id="contactForm"
  method="post"
  aria-describedby="form-status"
  action="/api/form"
  class="flex flex-col gap-5"
>
  <InputFields />
  <Text>
    For information about our privacy practices and commitment to protecting your privacy,
    please review our
    <a
      class="text-theme-primary underline"
      target="_blank"
      href="https://www.storyblok.com/legal/privacy-policy"
    >
      Privacy Policy
    </a>.
  </Text>
  <Box>
    <button
      type="submit"
      aria-busy="false"
      class="flex shadow-btn bg-theme-primary rounded-lg text-white py-2 px-5 leading-6 font-medium text-base tracking-normal disabled:cursor-not-allowed disabled:opacity-50"
    >
      Send Message
    </button>
  </Box>
  <Text
    id="formStatus"
    role="status"
    aria-live="polite"
    class="bg-green-100 p-4 rounded-lg sr-only"
    variant="success"
  />
</form>

<script>
  import type { FormSchemaType } from "~/utils";

  const form = document.getElementById("contactForm") as HTMLFormElement;

  /**
   * Clear all .sp-input fields and toggle the 'has-value' class on blur.
   */
  form.querySelectorAll<HTMLInputElement>("input.sp-input").forEach((el) => {
    el.value = "";
    el.addEventListener("blur", () => {
      el.classList.toggle("has-value", el.value.trim() !== "");
    });
  });

  form?.addEventListener("submit", async (event) => {
    event.preventDefault();
    const formData = new FormData(form);

    // Clear existing error messages.
    form.querySelectorAll(".error-message").forEach((el) => (el.textContent = ""));

    // Hide the status message.
    const formStatusText = form.querySelector("#formStatus") as HTMLParagraphElement;
    formStatusText.classList.add("sr-only");
    formStatusText.classList.add("bg-green-100", "text-green-600");

    // Disable the submit button and show a loading state.
    const submitButton = form.querySelector("button[type=submit]") as HTMLButtonElement;
    const originalText = submitButton.textContent;
    submitButton.disabled = true;
    submitButton.textContent = "Sending Message...";
    submitButton.setAttribute("aria-busy", "true");

    // Send the form data to the API.
    const response = await fetch(form.action, {
      method: "POST",
      body: formData,
    });

    // Define the API response types.
    interface SubmitErrorResponse {
      success: false;
      input: FormSchemaType;
      errors: Partial<Record<keyof FormSchemaType, string>>;
      message?: string;
    }
    interface SubmitSuccessResponse {
      success: true;
      message: string;
    }

    const data = (await response.json()) as SubmitSuccessResponse | SubmitErrorResponse;

    //handel when server response with 500 (eg: email send failed)
    if (response.status === 500) {
      formStatusText.textContent = data.message || "Unknown Error";
      formStatusText.classList.remove("sr-only");
      formStatusText.classList.remove("bg-green-100", "text-green-600");
      formStatusText.classList.add("bg-red-100", "text-red-600");
    }

    if (data.success === false && response.status === 400) {
      // Show field errors.
      Object.entries(data.errors).forEach(([field, message]) => {
        const errorElement = form.querySelector<HTMLParagraphElement>(
          `[data-name="${field}"]`
        );
        if (errorElement) {
          errorElement.textContent = message;
        }
      });
    } else {
      // On success: show status message and reset the form.
      if (data.message) {
        formStatusText.textContent = data.message;
      }
      formStatusText.classList.remove("sr-only");
      form.reset();

      // Remove status message after 5 second.
      setTimeout(() => {
        formStatusText.textContent = "";
        formStatusText.classList.add("sr-only");
      }, 5000);
      // Remove the 'has-value' class from all .sp-input fields.
      form.querySelectorAll<HTMLInputElement>("input.sp-input").forEach((el) => {
        el.classList.toggle("has-value", el.value.trim() !== "");
      });
    }
    // Restore the submit button.
    submitButton.disabled = false;
    submitButton.textContent = originalText;
    submitButton.setAttribute("aria-busy", "false");
  });
</script>
